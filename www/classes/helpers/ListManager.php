<?
/**
 * @license http://www.mailcleaner.net/open/licence_en.html Mailcleaner Public License
 * @package mailcleaner
 * @author Olivier Diserens
 * @copyright 2006, Olivier Diserens
 */
 
/**
 * This class will take care of storing a list and organize it as pages
 */
class ListManager {

  /**
   * default elements displayed per page
   * @var  numeric
   */
  private $per_page_ = 20;
  /**
   * actual page displayed
   * @var   numeric
   */
  private $page_ = 1;
  
  /**
   * list of elements found
   * @var  array
   */
  protected $elements_ = array();
  
  /**
   * name of the formular that includes the list
   * @var  string
   */
  private $form_name_ = 'search';

  /**
   * should the list be sorted or not
   * @var  boolean
   */
  private $sort_ = 1;
  
  
  public function clearList() {
  	unset($this->elements_);
    $this->elements_ = array();
  }
  /**
   * set an element of the list
   * @param  $key   string  name of the element
   * @param  $value mixed   value of the element
   */
  protected function setElement($key, $value) {
    $this->elements_[$key] = $value;
  }
  
  /**
   * check if an element is present
   * @param  $element  string  element key
   * @return           boolean true if present, false if not
   */
  protected function hasElement($element) {
    if (isset($this->elements_[$element])) {
        return true;
    }
    return false;
  }
  
  /**
   * return the number of elements of the list
   * @return  numeric  number of elements
   */
  public function getNbElements() {
    return count($this->elements_);
  }
  
  /**
   * set the number of elements per page
   * @param  $nb  numeric  number of element
   * @return      boolean  true on success, false on failure
   */
  public function setNbElementsPerPage($nb) {
    if (!is_numeric($nb)) {
       return false;
    }
    $this->per_page_ = $nb;
    return true;
  }
   
  /**
   * return the number of pages generated by the list
   * @return   numeric   number of pages
   */
  public function getNumberOfPages() {
    if (count($this->elements_) == 0 || $this->per_page_ == 0) {
      return 1;
    }
    return ceil(count($this->elements_)/$this->per_page_);
  }
 
  /**
   * set if the list should be autoamtically sorted or not
   * @param  $sort  boolean  flag to sort or not
   * @return     boolean  true on success, false on failure
   */
  public function setSort($sort) {
    $this->sort_ = $sort;
    return true;
  } 

  /**
   * return the actual page
   * @return  numeric  actual page
   */
   public function getPage() {
     return $this->page_;
   }
   
   /**
    * set the actual page to be displayed
    * @param  $page  numeric  page number
    * @return        bool     true on success, false on failure
    */
    public function setPage($page) {
      if (!is_numeric($page) && $page<$this->getNumberOfPage()) {
        return false;
      }
      $this->page_ = $page;
      return true;
    }
  
    /**
     * Set the formular name.
     * This will also check for eventual posted values
     * @param  $form  string  formular name
     * @return        bool    true on success, false on failure
     */
     public function setForm($form) {
       if (!is_string($form)) {
         return false;
       }
       $this->form_name_ = $form;
       
       // set if a page number is given
       if (isset($_REQUEST[$this->form_name_.'_page']) && is_numeric($_REQUEST[$this->form_name_.'_page'])) {
         $this->setPage($_REQUEST[$this->form_name_.'_page']);
       }
       return true;   
     }
     
  /**
   * return the filled template of the page
   * @param  $t  string  template to be filled
   * @param  $s  string  selected value
   * @return     string  filled template
   * @todo template tags to be rearranged.. some chould not be set here (f.ex. __SETTINGSTARGET__)
   */
  public function getList($t, $s) {
    global $lang_;
    if ($this->page_ > $this->getNumberOfPages()) { $this->page_ = 1;  }
    if ($this->sort_) {
      ksort($this->elements_);
    }
    $ret = "";  
    $i = 0;
    foreach ($this->elements_ as $element => $value) {
      $i++;
      if (($i < $this->per_page_*($this->page_-1)+1) || ($i > $this->per_page_*($this->page_))) {
        continue;
      }
      if ($value == $s || (is_object($value) && $value->getPref('name') == $s)) {
        $template = str_replace('__ROWSTYLE__', 'dataTableRowSelected', $t);
      } else {
        $template = str_replace('__ROWSTYLE__', 'dataTableRow', $t);
      }
      $template = str_replace('__ROWSTYLE__', 'dataTableRow', $template);
      if (is_object($value)) {
        $template = str_replace('__NAME__', $value->getPref('name'), $template);
        $template = str_replace('__DESTINATION__', $value->getPref('destination'), $template);
        $template = str_replace('__ID__', $value->getPref('id'), $template);
        $template = str_replace('__DOMAINSETTINGSTARGET__', "javascript:window.document.forms['".$this->form_name_."'].search_selected.value='".$value->getPref('name')."';window.document.forms['".$this->form_name_."'].submit();", $template);
        if ($value instanceof WWEntry) {
          $template = $value->getElementTemplate($template, $s, $i);
        }
      } else {
        $template = str_replace('__USER__', htmlentities($value), $template);
        $template = str_replace('__EMAIL__', htmlentities($value), $template);
        $template = str_replace('__ADMIN__', htmlentities($value), $template);
   
        $template = str_replace('__SETTINGSTARGET__', "javascript:window.document.forms['".$this->form_name_."'].search_selected.value='".urlencode($value)."';window.document.forms['".$this->form_name_."'].submit();", $template);
        $template = str_replace('__REMTARGET__', "javascript:delete_confirm('".urlencode($value)."')", $template);
      }
      $ret .= $template; 
    }
    return $ret;
  }
  
  public function getElements() {
  	 return $this->elements_;
  }
  
  /**
   * return the page separator character if needed
   * @param $sep  string  separator character or string
   * @return      string  separator character or string id needed
   */
  public function getPageSeparator($sep) {
   if(!is_string($sep)) {
    return "";
   }
   if ($this->getPage() > 1 && $this->getPage()<$this->getNumberOfPages()) {
     return $sep;
   }
   return "";
  }
  
  /**
   * return the html string of the previous page link 
   * @return   string html string of text and link
   */
  public function getPreviousPageLink() {
    global   $lang_;

    if ($this->getPage() > 1) {
      return "<a href=\"javascript:page(".($this->getPage() - 1).");\">".$lang_->print_txt('PREVIOUSPAGE')."</a>";
    }
    return "";
  }
  
  /**
   * return the html string of the next page link 
   * @return   string html string of text and link
   */
  public function getNextPageLink() {
    global   $lang_;
    
    if ($this->getPage() < $this->getNumberOfPages()) {
     return "<a href=\"javascript:page(".($this->getPage() + 1).");\">".$lang_->print_txt('NEXTPAGE')."</a>";
    }
    return "";
  }
  
  /**
   * return the javascript used when user selects an element of the list
   */
  public function getJavaScript() {
    $ret .= "function page(p) {";
    $ret .= "  window.document.forms['".$this->form_name_."'].".$this->form_name_."_page.value=p;";
    $ret .= "   window.document.forms['".$this->form_name_."'].submit(); ";
    $ret .= "}";
  return $ret;
}

public function encodeVarName($var) {
    $var = str_replace('@', '_AAA_', $var);
    $var = str_replace('.', '_PPP_', $var);
    $var = str_replace(' ', '_SSS_', $var);
    $var = str_replace('*', '_CCC_', $var);
    $var = str_replace('-', '_UUU_', $var);
    $var = str_replace('?', '_QQQ_', $var);
    $var = str_replace('#', '_ooo_', $var);
    $var = str_replace('%', '_ccc_', $var);
    $var = str_replace('!', '_eee_', $var);
    $var = str_replace('$', '_ddd_', $var);
    $var = str_replace('^', '_uuu_', $var);
    $var = str_replace('&amp;', '_aaa_', $var);
    $var = str_replace('(', '_bbb_', $var);
    $var = str_replace(')', '_BBB_', $var);
    $var = str_replace('+', '_ppp_', $var);
    $var = str_replace('=', '_EEE_', $var);
    return $var;
}

public function decodeVarName($var) {
    $var = str_replace('_AAA_', '@', $var);
    $var = str_replace('_PPP_', '.', $var);
    $var = str_replace('_SSS_', ' ', $var);
    $var = str_replace('_CCC_', '*', $var);
    $var = str_replace('_UUU_', '-', $var);
    $var = str_replace('_QQQ_', '?', $var);
    $var = str_replace('_ooo_', '#', $var);
    $var = str_replace('_ccc_', '%', $var);
    $var = str_replace('_eee_', '!', $var);
    $var = str_replace('_ddd_', '$', $var);
    $var = str_replace('_uuu_', '^', $var);
    $var = str_replace('_aaa_', '&', $var);
    $var = str_replace('_bbb_', '(', $var);
    $var = str_replace('_BBB_', ')', $var);
    $var = str_replace('_ppp_', '+', $var);
    $var = str_replace('_EEE_', '=', $var);
    return $var;
}

}
?>
