
use strict;
use lib "__SRCDIR__/lib";
use SMTPAuthenticator;
use SMTPCalloutConnector;

sub hideToken {
  my $dnsname = shift;
  my $count = $dnsname =~ tr/.//;
  if ($count >= 2 && $dnsname =~ /(([a-zA-Z0-9-_]*\.){2}[a-zA-Z0-9-_]*)\.$/) {
     return $1;
  } else {
     return $dnsname;
  }
}

sub authenticate {
  my $account = shift;
  my $password = shift;

  my $auth = SMTPAuthenticator::create($account);
  my $ip = Exim::expand_string('$sender_host_address');

  if (!$auth) {
    Exim::log_write("Could not create authenticator for account: $account");
    return 0;
  }

  if ($auth->authenticate($password, $ip)) {
    return 1;
  }
  my $error = $auth->getErrorText();
  return 0;
}

sub Auth_log {
  my $text = shift;

  Exim::log_write($text);
}


sub external_callout_verify {
  my $local_part = shift;
  my $domain = shift;
  my $rcpt = $local_part.'@'.$domain;

  my $connector = SMTPCalloutConnector::create($domain);
  if (!$connector) {
    Exim::log_write("Could not create callout connector for domain: $domain");
    return external_callout_build_return(1, "callout connector cannot be create");
  }

  if (!$connector->verify($rcpt)) {
    if ($connector->lastMessage() ne '') {
      Exim::log_write("External callout last message for recipient $rcpt: ".$connector->lastMessage());
    }
    return external_callout_build_return(0, $connector->lastMessage());
  }

  if ($connector->lastMessage() ne '') { 
    Exim::log_write("External callout last message for recipient $rcpt: ".$connector->lastMessage()); 
  }
  return external_callout_build_return(1, $connector->lastMessage());
}

sub external_callout_build_return {
  my $result = shift;
  my $message = shift;
  
  my $str = 'result='.$result;
  $str .= ' message="'.$message.'"';
  
  return $str;
}

sub WL_IP_Dom {
  my $domain = shift;
  my $IP = shift;
  my $mode = shift;

  $mode = 'SMTP' if ( ! defined($mode) );

  my $file = "/var/mailcleaner/spool/tmp/exim_stage1/rblwhitelists/$domain";

#  if ($mode eq 'SMTP') {
#    $file = "/var/mailcleaner/spool/tmp/exim_stage1/rblwhitelists/$domain";
#  } elsif ($mode eq 'SpamC) {
#    $file = "/var/mailcleaner/spool/tmp/exim_stage1/spamcwhitelists/$domain";
#  }
  return 'false' if ( ! -f $file );
  return 'false' if ( ! open FH, '<', $file);

  my @IPs = <FH>;
  close(FH);
  chomp(@IPs);

  use Net::CIDR::Lite;
  my $WhIPs = Net::CIDR::Lite->new();
  my $WhIPs6 = Net::CIDR::Lite->new();
  foreach (@IPs) {
    if ($_ =~ m/:/) {
      eval { $WhIPs6->add_any($_); };
    } else {
      eval { $WhIPs->add_any($_); };
    }
  }

  if ( ( $IP =~ /:/ && WhIPs6->find($IP) ) || ( $IP !~ /:/ && $WhIPs->find($IP) ) ) {
    Exim::log_write("IP $IP is whitelisted for $domain ($mode)"); 
    return 'true';
  }
  return 'false';
}

sub SMTP_WL_IP_Dom {
  return WL_IP_Dom(@_, 'SMTP');
}

sub SpamC_WL_IP_Dom {
  return WL_IP_Dom(@_, 'SpamC');
}

